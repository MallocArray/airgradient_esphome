  # https://esphome.io/components/display/ssd1306.html
  # Formatting reference: https://www.tutorialspoint.com/c_standard_library/c_function_printf.htm
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    id: oled_display
    address: 0x3C
    # rotation: 180°
    pages:
      - id: summary1
        lambda: |-
          it.printf(0, 0, id(poppins_light), "CO2:");
          it.printf(128, 0, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f ppm", id(co2).state);
          it.printf(0, 16, id(poppins_light), "PM2.5:");
          it.printf(128, 16, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f µg/m³", id(pm_2_5).state);
          it.printf(0, 32, id(poppins_light), "Temp:");
          if (id(display_in_f).state) {
            it.printf(128, 32, id(poppins_light), TextAlign::TOP_RIGHT, "%.1f°F", id(temp).state*9/5+32);
          } else {
            it.printf(128, 32, id(poppins_light), TextAlign::TOP_RIGHT, "%.1f°C", id(temp).state);
          }
          it.printf(0, 48, id(poppins_light), "Humidity:");
          it.printf(128, 48, id(poppins_light), TextAlign::TOP_RIGHT, "%.1f%%", id(humidity).state);
      - id: summary2
        lambda: |-
          it.printf(0, 0, id(poppins_light), "CO2:");
          it.printf(128, 0, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f ppm", id(co2).state);
          it.printf(0, 16, id(poppins_light), "PM2.5:");
          it.printf(128, 16, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f µg/m³", id(pm_2_5).state);
          it.printf(0, 32, id(poppins_light), "VOC:");
          it.printf(128, 32, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f", id(voc).state);
          it.printf(0, 48, id(poppins_light), "NOx:");
          it.printf(128, 48, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f", id(nox).state);
      - id: air_quality
        lambda: |-
          it.printf(0, 6, id(ubuntu), "CO2");
          it.printf(128, 6, id(ubuntu), TextAlign::TOP_RIGHT, "%.0f ppm", id(co2).state);
          it.printf(0, 34, id(ubuntu), "PM2");
          it.printf(128, 34, id(ubuntu), TextAlign::TOP_RIGHT, "%.0f µg/m³", id(pm_2_5).state);
      - id: air_temp
        lambda: |-
          it.printf(0, 6, id(ubuntu), "Temp");
          if (id(display_in_f).state) {
            it.printf(128, 6, id(ubuntu), TextAlign::TOP_RIGHT, "%.1f°F", id(temp).state*9/5+32);
          } else {
            it.printf(128, 6, id(ubuntu), TextAlign::TOP_RIGHT, "%.1f°C", id(temp).state);
          }
          it.printf(0, 34, id(ubuntu), "Humid");
          it.printf(128, 34, id(ubuntu), TextAlign::TOP_RIGHT, "%.1f%%", id(humidity).state);
      - id: tvoc
        lambda: |-
          it.printf(0, 6, id(ubuntu), "VOC:");
          it.printf(128, 6, id(ubuntu), TextAlign::TOP_RIGHT, "%.0f", id(voc).state);
          it.printf(0, 34, id(ubuntu), "NOx:");
          it.printf(128, 34, id(ubuntu), TextAlign::TOP_RIGHT, "%.0f", id(nox).state);
      # - id: combo
      #   lambda: |-
      #     if (id(display_in_f).state) {
      #       it.printf(0, 0, id(poppins_light_12), "%.1f °F", id(temp).state*9/5+32);
      #     } else {
      #       it.printf(0, 0, id(poppins_light_12), "%.1f °C", id(temp).state);
      #     }
      #     it.printf(128, 0, id(poppins_light_12), TextAlign::TOP_RIGHT, "%.1f%%", id(humidity).state);
      #     it.printf(0, 16, id(poppins_light_12), "%.0f µg", id(pm_2_5).state);
      #     it.printf(128, 16, id(poppins_light_12), TextAlign::TOP_RIGHT, "%.0f ppm", id(co2).state);
      #     it.printf(0, 32, id(poppins_light_12), "VOC: %.0f", id(voc).state);
      #     it.printf(128, 32, id(poppins_light_12), TextAlign::TOP_RIGHT, "NOx: %.0f", id(nox).state);
      #     it.printf(0, 48, id(poppins_light_12), "AQI: %.0f", id(pm_2_5_aqi).state);
      - id: boot
        lambda: |-
          it.printf(0, 0, id(poppins_light), "ID:");
          it.printf(128, 0, id(poppins_light), TextAlign::TOP_RIGHT, "%s", get_mac_address().c_str());
          it.printf(0, 21, id(poppins_light), "Config Ver: $ag_esphome_config_version");
          it.printf(0, 42, id(poppins_light), "$upper_devicename");

    on_page_change:
      to: boot
      then:
        - if:
            # Skip the boot page after initial boot
            condition:
                lambda: 'return id(device_uptime).state > 30;'
            then:
              - display.page.show_next: oled_display
              - component.update: oled_display
