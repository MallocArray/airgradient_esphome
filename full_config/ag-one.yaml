substitutions:
  config_version: 4.0.7
  co2_offset: '0'
  voc_learning_time_offset_hours: '12'
  nox_learning_time_offset_hours: '12'
  co2_green: '400'
  co2_yellow: '1000'
  co2_red: '2000'
  co2_purple: '4000'
  name: ag-one
  friendly_name: AG One
  name_add_mac_suffix: 'false'
esphome:
  name: ag-one
  friendly_name: AG One
  name_add_mac_suffix: false
  project:
    name: mallocarray.airgradient
    version: 4.0.7
  min_version: 2024.6.0
  on_boot:
  - priority: 200.0
    then:
    - if:
        condition:
          switch.is_on:
            id: upload_airgradient
        then:
        - http_request.post:
            url: !lambda |-
              return "https://hw.airgradient.com/sensors/airgradient:" + get_mac_address() + "/measures";
            headers:
              Content-Type: application/json
            json:
              wifi: !lambda |-
                return to_string(-50);
            capture_response: false
            max_response_buffer_size: 1000
            method: POST
  build_path: build/ag-one
  area: ''
  platformio_options: {}
  includes: []
  libraries: []
esp32:
  board: esp32-c3-devkitm-1
  flash_size: 4MB
  framework:
    version: 2.0.5
    source: ~3.20005.0
    platform_version: platformio/espressif32@5.4.0
    type: arduino
  variant: ESP32C3
logger:
  baud_rate: 0
  logs:
    component: ERROR
  tx_buffer_size: 512
  deassert_rts_dtr: false
  hardware_uart: USB_CDC
  level: DEBUG
captive_portal: {}
uart:
- rx_pin:
    number: 0
    mode:
      input: true
      output: false
      open_drain: false
      pullup: false
      pulldown: false
    inverted: false
    ignore_pin_validation_error: false
    ignore_strapping_warning: false
    drive_strength: 20.0
  tx_pin:
    number: 1
    mode:
      output: true
      input: false
      open_drain: false
      pullup: false
      pulldown: false
    inverted: false
    ignore_pin_validation_error: false
    ignore_strapping_warning: false
    drive_strength: 20.0
  baud_rate: 9600
  id: senseair_s8_uart
  rx_buffer_size: 256
  stop_bits: 1
  data_bits: 8
  parity: NONE
- rx_pin:
    number: 20
    mode:
      input: true
      output: false
      open_drain: false
      pullup: false
      pulldown: false
    inverted: false
    ignore_pin_validation_error: false
    ignore_strapping_warning: false
    drive_strength: 20.0
  tx_pin:
    number: 21
    mode:
      output: true
      input: false
      open_drain: false
      pullup: false
      pulldown: false
    inverted: false
    ignore_pin_validation_error: false
    ignore_strapping_warning: false
    drive_strength: 20.0
  baud_rate: 9600
  id: pms5003_uart
  rx_buffer_size: 256
  stop_bits: 1
  data_bits: 8
  parity: NONE
i2c:
- sda: 7
  scl: 6
  frequency: 400000.0
  scan: true
wifi:
  ap:
    ap_timeout: 1min
  domain: .local
  reboot_timeout: 15min
  power_save_mode: LIGHT
  fast_connect: false
  passive_scan: false
  enable_on_boot: true
  use_address: ag-one.local
sensor:
- platform: pmsx003
  type: PMSX003
  uart_id: pms5003_uart
  pm_2_5:
    name: PM 2.5
    id: pm_2_5
    device_class: pm25
    filters:
    - lambda: !lambda |-
        float result = 0.0;
        if (x == 0.0) {
          result = 0.0;
        } else if (x < 30.0) {
          result = (0.524 * x) - (0.0862 * id(humidity_raw).state) + 5.75;
        } else if (x < 50.0) {
          result = (0.786 * (x / 20 - 3/2) + 0.524 * (1 - (x / 20 - 3/2))) * x - (0.0862 * id(humidity_raw).state) + 5.75;
        } else if (x < 210.0) {
          result = (0.786 * x) - (0.0862 * id(humidity_raw).state) + 5.75;
        } else if (x < 260.0) {
          result = (0.69 * (x / 50 - 21/5) + 0.786 * (1 - (x / 50 - 21/5))) * x - (0.0862 * id(humidity_raw).state * (1 - (x / 50 - 21/5))) + (2.966 * (x / 50 - 21/5)) + (5.75 * (1 - (x / 50 - 21/5))) + (8.84 * pow(10,-4) * pow(x,2) * (x / 50 - 21/5));
        } else {
          result = 2.966 + (0.69 * x) + (8.84 * pow(10,-4) * pow(x,2));
        }
        if (result <= 0.0) {
          return 0.0;
        } else {
          return result;
        }
    disabled_by_default: false
    force_update: false
    unit_of_measurement: µg/m³
    icon: mdi:chemical-weapon
    accuracy_decimals: 0
    state_class: measurement
  pm_1_0:
    name: PM 1.0
    id: pm_1_0
    device_class: pm1
    disabled_by_default: false
    force_update: false
    unit_of_measurement: µg/m³
    icon: mdi:chemical-weapon
    accuracy_decimals: 0
    state_class: measurement
  pm_10_0:
    name: PM 10.0
    id: pm_10_0
    device_class: pm10
    disabled_by_default: false
    force_update: false
    unit_of_measurement: µg/m³
    icon: mdi:chemical-weapon
    accuracy_decimals: 0
    state_class: measurement
  pm_0_3um:
    name: PM 0.3
    id: pm_0_3um
    filters: []
    disabled_by_default: false
    force_update: false
    unit_of_measurement: /dL
    icon: mdi:chemical-weapon
    accuracy_decimals: 0
    state_class: measurement
  update_interval: 30s
- platform: template
  name: PM 2.5 AQI
  id: pm_2_5_aqi
  update_interval: 5min
  device_class: aqi
  icon: mdi:air-filter
  accuracy_decimals: 0
  filters:
  - skip_initial: 1
  lambda: !lambda |-
    // 2024 update from EPA https://www.epa.gov/system/files/documents/2024-02/pm-naaqs-air-quality-index-fact-sheet.pdf
    // https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI
    // Borrowed from https://github.com/kylemanna/sniffer/blob/master/esphome/sniffer_common.yaml
    if (id(pm_2_5).state <= 9.0) {
    // good
    return((50.0 - 0.0) / (9.0 - 0.0) * (id(pm_2_5).state - 0.0) + 0.0);
    } else if (id(pm_2_5).state <= 35.4) {
    // moderate
    return((100.0 - 51.0) / (35.4 - 9.1) * (id(pm_2_5).state - 9.1) + 51.0);
    } else if (id(pm_2_5).state <= 55.4) {
    // usg
    return((150.0 - 101.0) / (55.4 - 35.5) * (id(pm_2_5).state - 35.5) + 101.0);
    } else if (id(pm_2_5).state <= 125.4) {
    // unhealthy
    return((200.0 - 151.0) / (125.4 - 55.5) * (id(pm_2_5).state - 55.5) + 151.0);
    } else if (id(pm_2_5).state <= 225.4) {
    // very unhealthy
    return((300.0 - 201.0) / (225.4 - 125.5) * (id(pm_2_5).state - 125.5) + 201.0);
    } else if (id(pm_2_5).state <= 325.4) {
    // hazardous
    return((500.0 - 301.0) / (325.4 - 225.5) * (id(pm_2_5).state - 225.5) + 301.0);
    } else {
    return(500);
    }
  disabled_by_default: false
  force_update: false
- platform: senseair
  co2:
    name: CO2
    id: co2
    filters:
    - skip_initial: 1
    - offset: 0.0
    disabled_by_default: false
    force_update: false
    unit_of_measurement: ppm
    icon: mdi:molecule-co2
    accuracy_decimals: 0
    device_class: carbon_dioxide
    state_class: measurement
  id: senseair_s8
  uart_id: senseair_s8_uart
  update_interval: 60s
- platform: sht4x
  temperature:
    name: Temperature Raw
    id: temp_raw
    disabled_by_default: true
    force_update: false
    unit_of_measurement: °C
    icon: mdi:thermometer
    accuracy_decimals: 2
    device_class: temperature
    state_class: measurement
  humidity:
    name: Humidity Raw
    id: humidity_raw
    disabled_by_default: true
    force_update: false
    unit_of_measurement: '%'
    icon: mdi:water-percent
    accuracy_decimals: 2
    device_class: humidity
    state_class: measurement
  address: 0x44
  precision: High
  heater_power: High
  heater_time: Long
  heater_max_duty: 0.0
  update_interval: 60s
- platform: copy
  source_id: temp_raw
  name: Temperature
  id: temp
  disabled_by_default: false
  force_update: false
  unit_of_measurement: °C
  icon: mdi:thermometer
  accuracy_decimals: 2
  device_class: temperature
  state_class: measurement
- platform: copy
  source_id: humidity_raw
  name: Humidity
  id: humidity
  disabled_by_default: false
  force_update: false
  unit_of_measurement: '%'
  icon: mdi:water-percent
  accuracy_decimals: 2
  device_class: humidity
  state_class: measurement
- platform: sgp4x
  voc:
    name: VOC Index
    id: voc
    algorithm_tuning:
      learning_time_offset_hours: 12
      index_offset: 100
      learning_time_gain_hours: 12
      gating_max_duration_minutes: 720
      std_initial: 50
      gain_factor: 230
    disabled_by_default: false
    force_update: false
    icon: mdi:radiator
    accuracy_decimals: 0
    device_class: aqi
    state_class: measurement
  nox:
    name: NOx Index
    id: nox
    algorithm_tuning:
      learning_time_offset_hours: 12
      index_offset: 100
      learning_time_gain_hours: 12
      gating_max_duration_minutes: 720
      std_initial: 50
      gain_factor: 230
    disabled_by_default: false
    force_update: false
    icon: mdi:radiator
    accuracy_decimals: 0
    device_class: aqi
    state_class: measurement
  compensation:
    temperature_source: temp
    humidity_source: humidity
  store_baseline: true
  update_interval: 60s
  address: 0x59
- platform: wifi_signal
  name: WiFi Signal
  id: wifi_dbm
  update_interval: 60s
  disabled_by_default: false
  force_update: false
  unit_of_measurement: dBm
  accuracy_decimals: 0
  device_class: signal_strength
  state_class: measurement
  entity_category: diagnostic
- platform: uptime
  name: Uptime
  id: device_uptime
  disabled_by_default: false
  force_update: false
  unit_of_measurement: s
  icon: mdi:timer-outline
  accuracy_decimals: 0
  device_class: duration
  state_class: total_increasing
  entity_category: diagnostic
  update_interval: 60s
button:
- platform: template
  name: SenseAir S8 Calibration
  id: senseair_s8_calibrate_button
  on_press:
  - then:
    - senseair.background_calibration:
        id: senseair_s8
    - delay: 70s
    - senseair.background_calibration_result:
        id: senseair_s8
  disabled_by_default: false
- platform: template
  name: SenseAir S8 Show Calibration Interval
  id: senseair_s8_show_calibrate_interval
  on_press:
  - then:
    - senseair.abc_get_period:
        id: senseair_s8
  disabled_by_default: false
switch:
- platform: template
  name: SenseAir S8 Automatic Baseline Correction
  id: senseair_s8_abc_switch
  restore_mode: RESTORE_DEFAULT_ON
  optimistic: true
  entity_category: config
  turn_on_action:
    then:
    - senseair.abc_enable:
        id: senseair_s8
  turn_off_action:
    then:
    - senseair.abc_disable:
        id: senseair_s8
  disabled_by_default: false
  assumed_state: false
- platform: template
  name: Display Temperature in °F
  id: display_in_f
  restore_mode: RESTORE_DEFAULT_ON
  optimistic: true
  entity_category: config
  icon: mdi:thermometer
  disabled_by_default: false
  assumed_state: false
- platform: template
  name: Display AirGradient Default Page
  id: display_ag_default_page
  restore_mode: RESTORE_DEFAULT_ON
  optimistic: true
  entity_category: config
  icon: mdi:monitor
  disabled_by_default: false
  assumed_state: false
- platform: template
  name: Display Summary Pages
  id: display_summary_pages
  restore_mode: RESTORE_DEFAULT_OFF
  optimistic: true
  entity_category: config
  icon: mdi:monitor
  disabled_by_default: false
  assumed_state: false
- platform: template
  name: Display Air Quality Page
  id: display_air_quality_page
  restore_mode: RESTORE_DEFAULT_OFF
  optimistic: true
  entity_category: config
  icon: mdi:monitor
  disabled_by_default: false
  assumed_state: false
- platform: template
  name: Display Temp/Hum Page
  id: display_air_temp_page
  restore_mode: RESTORE_DEFAULT_OFF
  optimistic: true
  entity_category: config
  icon: mdi:monitor
  disabled_by_default: false
  assumed_state: false
- platform: template
  name: Display VOC Page
  id: display_voc_page
  restore_mode: RESTORE_DEFAULT_OFF
  optimistic: true
  entity_category: config
  icon: mdi:monitor
  disabled_by_default: false
  assumed_state: false
- platform: template
  name: Display Combo Page
  id: display_combo_page
  restore_mode: RESTORE_DEFAULT_OFF
  optimistic: true
  entity_category: config
  icon: mdi:monitor
  disabled_by_default: false
  assumed_state: false
- platform: template
  name: Display Boot Page
  id: display_boot_page
  restore_mode: ALWAYS_ON
  optimistic: true
  entity_category: config
  icon: mdi:monitor
  disabled_by_default: false
  assumed_state: false
- platform: template
  name: Display Blank Page
  id: display_blank_page
  restore_mode: RESTORE_DEFAULT_OFF
  optimistic: true
  entity_category: config
  icon: mdi:monitor
  on_turn_on:
  - then:
    - display.page.show:
        id: blank
    - component.update:
        id: oled_display
  on_turn_off:
  - then:
    - display.page.show_next:
        id: oled_display
    - component.update:
        id: oled_display
  disabled_by_default: false
  assumed_state: false
- platform: template
  name: Upload to AirGradient Dashboard
  id: upload_airgradient
  restore_mode: RESTORE_DEFAULT_OFF
  optimistic: true
  disabled_by_default: false
  assumed_state: false
font:
- file:
    family: Open Sans
    weight: 400
    italic: false
    refresh: 1d
    type: gfonts
  id: open_sans_14
  size: 14
  glyphs:
  - ' '
  - '!'
  - '"'
  - '%'
  - (
  - )
  - +
  - ','
  - '-'
  - .
  - /
  - '0'
  - '1'
  - '2'
  - '3'
  - '4'
  - '5'
  - '6'
  - '7'
  - '8'
  - '9'
  - ':'
  - '='
  - A
  - B
  - C
  - D
  - E
  - F
  - G
  - H
  - I
  - J
  - K
  - L
  - M
  - N
  - O
  - P
  - Q
  - R
  - S
  - T
  - U
  - V
  - W
  - X
  - Y
  - Z
  - _
  - a
  - b
  - c
  - d
  - e
  - f
  - g
  - h
  - i
  - j
  - k
  - l
  - m
  - n
  - o
  - p
  - q
  - r
  - s
  - t
  - u
  - v
  - w
  - x
  - y
  - z
  - °
  - ³
  - µ
  bpp: 1
- file:
    family: Open Sans
    weight: 400
    italic: false
    refresh: 1d
    type: gfonts
  id: open_sans_9
  size: 9
  glyphs:
  - ' '
  - '!'
  - '"'
  - '%'
  - (
  - )
  - +
  - ','
  - '-'
  - .
  - /
  - '0'
  - '1'
  - '2'
  - '3'
  - '4'
  - '5'
  - '6'
  - '7'
  - '8'
  - '9'
  - ':'
  - '='
  - A
  - B
  - C
  - D
  - E
  - F
  - G
  - H
  - I
  - J
  - K
  - L
  - M
  - N
  - O
  - P
  - Q
  - R
  - S
  - T
  - U
  - V
  - W
  - X
  - Y
  - Z
  - _
  - a
  - b
  - c
  - d
  - e
  - f
  - g
  - h
  - i
  - j
  - k
  - l
  - m
  - n
  - o
  - p
  - q
  - r
  - s
  - t
  - u
  - v
  - w
  - x
  - y
  - z
  - °
  - ³
  - µ
  bpp: 1
- file:
    family: Open Sans
    weight: 400
    italic: false
    refresh: 1d
    type: gfonts
  id: open_sans_20
  size: 20
  glyphs:
  - ' '
  - '!'
  - '"'
  - '%'
  - (
  - )
  - +
  - ','
  - '-'
  - .
  - /
  - '0'
  - '1'
  - '2'
  - '3'
  - '4'
  - '5'
  - '6'
  - '7'
  - '8'
  - '9'
  - ':'
  - '='
  - A
  - B
  - C
  - D
  - E
  - F
  - G
  - H
  - I
  - J
  - K
  - L
  - M
  - N
  - O
  - P
  - Q
  - R
  - S
  - T
  - U
  - V
  - W
  - X
  - Y
  - Z
  - _
  - a
  - b
  - c
  - d
  - e
  - f
  - g
  - h
  - i
  - j
  - k
  - l
  - m
  - n
  - o
  - p
  - q
  - r
  - s
  - t
  - u
  - v
  - w
  - x
  - y
  - z
  - °
  - ³
  - µ
  bpp: 1
display:
- platform: ssd1306_i2c
  model: SH1106_128X64
  id: oled_display
  address: 0x3C
  pages:
  - id: airgradient_default
    lambda: !lambda |-
      if (id(display_in_f).state) {
        it.printf(0, 0, id(open_sans_14), "%.1f°F", id(temp).state*9/5+32);
      } else {
        it.printf(0, 0, id(open_sans_14), "%.1f°C", id(temp).state);
      }
      it.printf(128, 0, id(open_sans_14), TextAlign::TOP_RIGHT, "%.1f%%", id(humidity).state);
      it.line(0,17,128,17);
      it.printf(0,19, id(open_sans_9), "CO2");
      it.printf(0,27, id(open_sans_20), "%.0f", id(co2).state);
      it.printf(0,52, id(open_sans_9), "ppm");
      it.line(50,19,50,64);
      it.printf(54, 19, id(open_sans_9), "PM2.5");
      it.printf(54, 27, id(open_sans_20), "%.0f", id(pm_2_5).state);
      it.printf(54, 52, id(open_sans_9), "µg/m³");
      it.line(100,19,100,64);
      it.printf(104,18, id(open_sans_9), "TVOC");
      it.printf(104,29, id(open_sans_9), "%.0f", id(voc).state);
      it.printf(104,41, id(open_sans_9), "NOx");
      it.printf(104,52, id(open_sans_9), "%.0f", id(nox).state);
  - id: boot
    lambda: !lambda |-
      it.printf(0, 0, id(open_sans_14), "ID:");
      it.printf(128, 0, id(open_sans_14), TextAlign::TOP_RIGHT, "%s", get_mac_address().c_str());
      it.printf(0, 21, id(open_sans_14), "Config Ver: 4.0.7");
      it.printf(0, 42, id(open_sans_14), "AG One");
  - id: summary1
    lambda: !lambda |-
      it.printf(0, 0, id(open_sans_14), "CO2:");
      it.printf(128, 0, id(open_sans_14), TextAlign::TOP_RIGHT, "%.0f ppm", id(co2).state);
      it.printf(0, 16, id(open_sans_14), "PM2.5:");
      it.printf(128, 16, id(open_sans_14), TextAlign::TOP_RIGHT, "%.0f µg/m³", id(pm_2_5).state);
      it.printf(0, 32, id(open_sans_14), "Temp:");
      if (id(display_in_f).state) {
        it.printf(128, 32, id(open_sans_14), TextAlign::TOP_RIGHT, "%.1f°F", id(temp).state*9/5+32);
      } else {
        it.printf(128, 32, id(open_sans_14), TextAlign::TOP_RIGHT, "%.1f°C", id(temp).state);
      }
      it.printf(0, 48, id(open_sans_14), "Humidity:");
      it.printf(128, 48, id(open_sans_14), TextAlign::TOP_RIGHT, "%.1f%%", id(humidity).state);
  - id: summary2
    lambda: !lambda |-
      it.printf(0, 0, id(open_sans_14), "CO2:");
      it.printf(128, 0, id(open_sans_14), TextAlign::TOP_RIGHT, "%.0f ppm", id(co2).state);
      it.printf(0, 16, id(open_sans_14), "PM2.5:");
      it.printf(128, 16, id(open_sans_14), TextAlign::TOP_RIGHT, "%.0f µg/m³", id(pm_2_5).state);
      it.printf(0, 32, id(open_sans_14), "VOC:");
      it.printf(128, 32, id(open_sans_14), TextAlign::TOP_RIGHT, "%.0f", id(voc).state);
      it.printf(0, 48, id(open_sans_14), "NOx:");
      it.printf(128, 48, id(open_sans_14), TextAlign::TOP_RIGHT, "%.0f", id(nox).state);
  - id: air_quality
    lambda: !lambda |-
      it.printf(0, 13, id(open_sans_14), "CO2");
      it.printf(128, 6, id(open_sans_20), TextAlign::TOP_RIGHT, "%.0f ppm", id(co2).state);
      it.printf(0, 41, id(open_sans_14), "PM2");
      it.printf(128, 34, id(open_sans_20), TextAlign::TOP_RIGHT, "%.0f µg/m³", id(pm_2_5).state);
  - id: air_temp
    lambda: !lambda |-
      it.printf(0, 13, id(open_sans_14), "Temp");
      if (id(display_in_f).state) {
        it.printf(128, 6, id(open_sans_20), TextAlign::TOP_RIGHT, "%.1f°F", id(temp).state*9/5+32);
      } else {
        it.printf(128, 6, id(open_sans_20), TextAlign::TOP_RIGHT, "%.1f°C", id(temp).state);
      }
      it.printf(0, 41, id(open_sans_14), "Humid");
      it.printf(128, 34, id(open_sans_20), TextAlign::TOP_RIGHT, "%.1f%%", id(humidity).state);
  - id: air_voc
    lambda: !lambda |-
      it.printf(0, 6, id(open_sans_20), "VOC:");
      it.printf(128, 6, id(open_sans_20), TextAlign::TOP_RIGHT, "%.0f", id(voc).state);
      it.printf(0, 34, id(open_sans_20), "NOx:");
      it.printf(128, 34, id(open_sans_20), TextAlign::TOP_RIGHT, "%.0f", id(nox).state);
  - id: combo
    lambda: !lambda |-
      if (id(display_in_f).state) {
        it.printf(0, 0, id(open_sans_14), "%.1f °F", id(temp).state*9/5+32);
      } else {
        it.printf(0, 0, id(open_sans_14), "%.1f °C", id(temp).state);
      }
      it.printf(128, 0, id(open_sans_14), TextAlign::TOP_RIGHT, "%.1f%%", id(humidity).state);
      it.printf(0, 16, id(open_sans_14), "%.0f µg/m³", id(pm_2_5).state);
      it.printf(128, 16, id(open_sans_14), TextAlign::TOP_RIGHT, "%.0f ppm", id(co2).state);
      it.printf(0, 32, id(open_sans_14), "VOC: %.0f", id(voc).state);
      it.printf(128, 32, id(open_sans_14), TextAlign::TOP_RIGHT, "NOx: %.0f", id(nox).state);
      it.printf(0, 48, id(open_sans_14), "AQI: %.0f", id(pm_2_5_aqi).state);
  - id: blank
    lambda: !lambda |-
      it.printf(0, 0, id(open_sans_14), " ");
  on_page_change:
  - to: airgradient_default
    then:
    - if:
        condition:
          switch.is_off:
            id: display_ag_default_page
        then:
        - display.page.show_next:
            id: oled_display
        - component.update:
            id: oled_display
  - to: summary1
    then:
    - if:
        condition:
          switch.is_off:
            id: display_summary_pages
        then:
        - display.page.show_next:
            id: oled_display
        - component.update:
            id: oled_display
  - to: summary2
    then:
    - if:
        condition:
          switch.is_off:
            id: display_summary_pages
        then:
        - display.page.show_next:
            id: oled_display
        - component.update:
            id: oled_display
  - to: air_quality
    then:
    - if:
        condition:
          switch.is_off:
            id: display_air_quality_page
        then:
        - display.page.show_next:
            id: oled_display
        - component.update:
            id: oled_display
  - to: air_temp
    then:
    - if:
        condition:
          switch.is_off:
            id: display_air_temp_page
        then:
        - display.page.show_next:
            id: oled_display
        - component.update:
            id: oled_display
  - to: air_voc
    then:
    - if:
        condition:
          switch.is_off:
            id: display_voc_page
        then:
        - display.page.show_next:
            id: oled_display
        - component.update:
            id: oled_display
  - to: combo
    then:
    - if:
        condition:
          switch.is_off:
            id: display_combo_page
        then:
        - display.page.show_next:
            id: oled_display
        - component.update:
            id: oled_display
  - to: boot
    then:
    - if:
        condition:
          switch.is_off:
            id: display_boot_page
        then:
        - display.page.show_next:
            id: oled_display
        - component.update:
            id: oled_display
  - to: blank
    then:
    - if:
        condition:
          switch.is_off:
            id: display_blank_page
        then:
        - display.page.show_next:
            id: oled_display
        - component.update:
            id: oled_display
  auto_clear_enabled: true
  brightness: 1.0
  contrast: 1.0
  flip_x: true
  flip_y: true
  offset_x: 0
  offset_y: 0
  invert: false
  update_interval: 1s
interval:
- interval: 10s
  startup_delay: 1s
  then:
  - if:
      condition:
        switch.is_on:
          id: display_boot_page
      then:
      - switch.turn_off:
          id: display_boot_page
- interval: 5s
  then:
  - if:
      condition:
        switch.is_on:
          id: display_blank_page
      then:
      - display.page.show:
          id: blank
      - component.update:
          id: oled_display
      else:
      - display.page.show_next:
          id: oled_display
      - component.update:
          id: oled_display
  startup_delay: 0s
- interval: 5s
  then:
  - if:
      condition:
        light.is_on:
          id: led_strip
      then:
      - if:
          condition:
            lambda: !lambda |-
              return !(isnan(id(co2).state));
          then:
          - light.addressable_set:
              id: led_strip
              color_brightness: !lambda |-
                return ((id(led_brightness).state - (id(led_fade).state * 5)) / 100.0);
              range_from: 0
              range_to: 10
              red: !lambda |-
                return (id(co2).state < 400) ? 0 : (id(co2).state <= 1000) ? (id(co2).state - 400) / (1000 - 400) : 1;
              green: !lambda |-
                return (id(co2).state < 1000) ? 1 : (id(co2).state <= 2000) ? 1 - (id(co2).state - 1000) / (2000 - 1000) : 0;
              blue: !lambda |-
                return (id(co2).state < 2000) ? 0 : (id(co2).state <= 4000) ? (id(co2).state - 2000) / (4000 - 2000) : 1;
          - light.addressable_set:
              id: led_strip
              color_brightness: !lambda |-
                return ((id(led_brightness).state - (id(led_fade).state * 4)) / 100.0);
              range_from: 1
              range_to: 9
              red: !lambda |-
                return (id(co2).state < 400) ? 0 : (id(co2).state <= 1000) ? (id(co2).state - 400) / (1000 - 400) : 1;
              green: !lambda |-
                return (id(co2).state < 1000) ? 1 : (id(co2).state <= 2000) ? 1 - (id(co2).state - 1000) / (2000 - 1000) : 0;
              blue: !lambda |-
                return (id(co2).state < 2000) ? 0 : (id(co2).state <= 4000) ? (id(co2).state - 2000) / (4000 - 2000) : 1;
          - light.addressable_set:
              id: led_strip
              color_brightness: !lambda |-
                return ((id(led_brightness).state - (id(led_fade).state * 3)) / 100.0);
              range_from: 2
              range_to: 8
              red: !lambda |-
                return (id(co2).state < 400) ? 0 : (id(co2).state <= 1000) ? (id(co2).state - 400) / (1000 - 400) : 1;
              green: !lambda |-
                return (id(co2).state < 1000) ? 1 : (id(co2).state <= 2000) ? 1 - (id(co2).state - 1000) / (2000 - 1000) : 0;
              blue: !lambda |-
                return (id(co2).state < 2000) ? 0 : (id(co2).state <= 4000) ? (id(co2).state - 2000) / (4000 - 2000) : 1;
          - light.addressable_set:
              id: led_strip
              color_brightness: !lambda |-
                return ((id(led_brightness).state - (id(led_fade).state * 2)) / 100.0);
              range_from: 3
              range_to: 7
              red: !lambda |-
                return (id(co2).state < 400) ? 0 : (id(co2).state <= 1000) ? (id(co2).state - 400) / (1000 - 400) : 1;
              green: !lambda |-
                return (id(co2).state < 1000) ? 1 : (id(co2).state <= 2000) ? 1 - (id(co2).state - 1000) / (2000 - 1000) : 0;
              blue: !lambda |-
                return (id(co2).state < 2000) ? 0 : (id(co2).state <= 4000) ? (id(co2).state - 2000) / (4000 - 2000) : 1;
          - light.addressable_set:
              id: led_strip
              color_brightness: !lambda |-
                return ((id(led_brightness).state - (id(led_fade).state)) / 100.0);
              range_from: 4
              range_to: 6
              red: !lambda |-
                return (id(co2).state < 400) ? 0 : (id(co2).state <= 1000) ? (id(co2).state - 400) / (1000 - 400) : 1;
              green: !lambda |-
                return (id(co2).state < 1000) ? 1 : (id(co2).state <= 2000) ? 1 - (id(co2).state - 1000) / (2000 - 1000) : 0;
              blue: !lambda |-
                return (id(co2).state < 2000) ? 0 : (id(co2).state <= 4000) ? (id(co2).state - 2000) / (4000 - 2000) : 1;
          - light.addressable_set:
              id: led_strip
              color_brightness: !lambda |-
                return id(led_brightness).state / 100.0;
              range_from: 5
              range_to: 5
              red: !lambda |-
                return (id(co2).state < 400) ? 0 : (id(co2).state <= 1000) ? (id(co2).state - 400) / (1000 - 400) : 1;
              green: !lambda |-
                return (id(co2).state < 1000) ? 1 : (id(co2).state <= 2000) ? 1 - (id(co2).state - 1000) / (2000 - 1000) : 0;
              blue: !lambda |-
                return (id(co2).state < 2000) ? 0 : (id(co2).state <= 4000) ? (id(co2).state - 2000) / (4000 - 2000) : 1;
      - if:
          condition:
            lambda: !lambda |-
              return (isnan(id(co2).state));
          then:
          - light.addressable_set:
              id: led_strip
              color_brightness: !lambda |-
                return id(led_brightness).state / 100.0;
              range_from: 0
              range_to: 10
              red: 0.0
              green: 0.0
              blue: 0.0
  startup_delay: 0s
- interval: 150s
  then:
  - if:
      condition:
        switch.is_on:
          id: upload_airgradient
      then:
      - http_request.post:
          url: !lambda |-
            return "https://hw.airgradient.com/sensors/airgradient:" + get_mac_address() + "/measures";
          headers:
            Content-Type: application/json
          json:
            wifi: !lambda |-
              return to_string(id(wifi_dbm).state);
            rco2: !lambda |-
              return to_string(id(co2).state);
            pm01: !lambda |-
              return to_string(id(pm_1_0).state);
            pm02: !lambda |-
              return to_string(id(pm_2_5).state);
            pm10: !lambda |-
              return to_string(id(pm_10_0).state);
            pm003Count: !lambda |-
              return to_string(id(pm_0_3um).state);
            atmp: !lambda |-
              return to_string(id(temp_raw).state);
            atmpCompensated: !lambda |-
              return to_string(id(temp).state);
            rhum: !lambda |-
              return to_string(id(humidity_raw).state);
            rhumCompensated: !lambda |-
              return to_string(id(humidity).state);
            tvocIndex: !lambda |-
              return to_string(id(voc).state);
            noxIndex: !lambda |-
              return to_string(id(nox).state);
            boot: !lambda |-
              return to_string(round(id(device_uptime).state/60));
          capture_response: false
          max_response_buffer_size: 1000
          method: POST
  startup_delay: 0s
- interval: 150s
  then:
  - output.turn_on:
      id: external_watchdog
  - delay: 20ms
  - output.turn_off:
      id: external_watchdog
  startup_delay: 0s
number:
- platform: template
  name: Display Contrast %
  icon: mdi:lightbulb
  id: display_contrast
  min_value: 0.0
  max_value: 100.0
  step: 1.0
  initial_value: 100.0
  optimistic: true
  restore_value: true
  mode: SLIDER
  on_value:
  - then:
    - lambda: !lambda |-
        id(oled_display).set_contrast(id(display_contrast).state / 100.0);
  disabled_by_default: false
  update_interval: 60s
- platform: template
  name: LED Brightness %
  icon: mdi:lightbulb
  id: led_brightness
  min_value: 0.0
  max_value: 100.0
  step: 1.0
  initial_value: 100.0
  optimistic: true
  restore_value: true
  mode: SLIDER
  disabled_by_default: false
  update_interval: 60s
- platform: template
  name: LED Fade %
  icon: mdi:lightbulb
  id: led_fade
  min_value: 0.0
  max_value: 100.0
  step: 1.0
  initial_value: 20.0
  optimistic: true
  restore_value: true
  mode: BOX
  disabled_by_default: false
  update_interval: 60s
light:
- platform: esp32_rmt_led_strip
  rgb_order: GRB
  pin: 10
  num_leds: 11
  rmt_channel: 0
  chipset: WS2812
  name: LED Strip
  id: led_strip
  restore_mode: RESTORE_DEFAULT_OFF
  disabled_by_default: false
  gamma_correct: 2.8
  default_transition_length: 1s
  flash_transition_length: 0s
  is_rgbw: false
  is_wrgb: false
http_request:
  verify_ssl: false
  watchdog_timeout: 30s
  useragent: ESPHome/2024.6.3 (https://esphome.io)
  follow_redirects: true
  redirect_limit: 3
  timeout: 5s
output:
- platform: gpio
  id: external_watchdog
  pin:
    number: 2
    ignore_strapping_warning: true
    mode:
      output: true
      input: false
      open_drain: false
      pullup: false
      pulldown: false
    inverted: false
    ignore_pin_validation_error: false
    drive_strength: 20.0
binary_sensor:
- platform: gpio
  pin:
    number: 9
    mode:
      input: true
      pullup: true
      output: false
      open_drain: false
      pulldown: false
    inverted: true
    ignore_strapping_warning: true
    ignore_pin_validation_error: false
    drive_strength: 20.0
  internal: true
  name: Configuration Button
  id: config_button
  on_multi_click:
  - timing:
    - state: true
      min_length: 0ms
      max_length: 1s
    - state: false
      min_length: 500ms
    then:
    - logger.log:
        format: Toggling display betwen C and F
        level: DEBUG
        args: []
        tag: main
    - switch.toggle:
        id: display_in_f
    invalid_cooldown: 1s
  - timing:
    - state: true
      min_length: 1s
      max_length: 5s
    - state: false
      min_length: 500ms
    then:
    - logger.log:
        format: Starting manual CO2 calibration
        level: DEBUG
        args: []
        tag: main
    - senseair.background_calibration:
        id: senseair_s8
    - delay: 70s
    - senseair.background_calibration_result:
        id: senseair_s8
    invalid_cooldown: 1s
  disabled_by_default: false
api:
  port: 6053
  password: \033[5m''\033[6m
  reboot_timeout: 15min
ota:
- platform: esphome
  version: 2
  port: 3232
dashboard_import:
  package_import_url: github://MallocArray/airgradient_esphome/airgradient-one.yaml
  import_full_config: false

