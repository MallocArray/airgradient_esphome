# Tested on AirGradient Pro V3.3
# https://www.airgradient.com/open-airgradient/instructions/overview/

# Needs ESPHome 2023.7.0 or later

# Reference for substitutions: https://github.com/ajfriesen/ESPHome-AirGradient/blob/main/air-gradient-pro-diy.yaml
substitutions:
  devicename: "airgradient-pro"
  upper_devicename: "AG Pro"
  ag_esphome_config_version: 0.9.6
  line0: 0
  line1: 128
  wifi_ssid: !secret wifi_ssid
  SENSE_AIR_S8_CO2_MIN: 400  # 419 as of 2023-06 https://gml.noaa.gov/ccgg/trends/global.html

esphome:
  name: "${devicename}"
  friendly_name: "${upper_devicename}"
  name_add_mac_suffix: true  # Set to false if you don't want part of the MAC address in the name
  on_boot:
    priority: 200  # Network connections setup
    then:
      - http_request.post:
          # Return wifi signal -50 as soon as device boots to show activity on AirGradient Dashboard site
          # Using -50 instead of actual value as the wifi_signal sensor has not reported a value at this point in boot process
          url: !lambda |-
            return "http://hw.airgradient.com/sensors/airgradient:" + get_mac_address().substr(6,11) + "/measures";
          headers:
              Content-Type: application/json
          json:
            wifi: !lambda return to_string(-50);

esp8266:
  board: d1_mini
  restore_from_flash: true  # Used to store state of display config


# Enable logging
# https://esphome.io/components/logger.html
logger:
  logs:
    component: ERROR  # Hiding warning messages about component taking a long time https://github.com/esphome/issues/issues/4717

# Enable Home Assistant API
api:

ota:

wifi:
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:

# The captive portal is a fallback mechanism for when connecting to the configured WiFi fails.
# https://esphome.io/components/captive_portal.html
captive_portal:

# web_server:  # Please note that enabling this component will take up a lot of memory and may decrease stability, especially on ESP8266.

# Create a switch for safe_mode in order to flash the device
# Solution from this thread:
# https://community.home-assistant.io/t/esphome-flashing-over-wifi-does-not-work/357352/1
switch:
  - platform: safe_mode
    name: "Flash Mode (Safe Mode)"
    icon: "mdi:cellphone-arrow-down"
  - platform: template
    name: "Display Temperature in °F"
    icon: "mdi:thermometer"
    id: display_in_f
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: True

# https://www.esphome-devices.com/devices/AirGradient-DIY/
# https://github.com/JacobMillward/airgradient_diy_pro_esphome/blob/main/airgradient_diy_pro.yaml

uart:
  # https://esphome.io/components/uart.html#uart
  - rx_pin: D4
    tx_pin: D3
    baud_rate: 9600
    id: senseair_s8_uart

  - rx_pin: D5
    tx_pin: D6
    baud_rate: 9600
    id: pms5003_uart

i2c:
  # https://esphome.io/components/i2c.html
  sda: D2
  scl: D1
  frequency: 200kHz

sensor:
  - platform: pmsx003
    # PMS5003 https://esphome.io/components/sensor/pmsx003.html
    type: PMSX003
    pm_2_5:
      name: "PM 2.5"
      id: pm_2_5
      on_value:
        lambda: |-
          // https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI
          // Borrowed from https://github.com/kylemanna/sniffer/blob/master/esphome/sniffer_common.yaml
          if (id(pm_2_5).state <= 12.0) {
            // good
            id(pm_2_5_aqi).publish_state((50.0 - 0.0) / (12.0 - 0.0) * (id(pm_2_5).state - 0.0) + 0.0);
          } else if (id(pm_2_5).state <= 35.4) {
            // moderate
            id(pm_2_5_aqi).publish_state((100.0 - 51.0) / (35.4 - 12.1) * (id(pm_2_5).state - 12.1) + 51.0);
          } else if (id(pm_2_5).state <= 55.4) {
            // usg
            id(pm_2_5_aqi).publish_state((150.0 - 101.0) / (55.4 - 35.5) * (id(pm_2_5).state - 35.5) + 101.0);
          } else if (id(pm_2_5).state <= 150.4) {
            // unhealthy
            id(pm_2_5_aqi).publish_state((200.0 - 151.0) / (150.4 - 55.5) * (id(pm_2_5).state - 55.5) + 151.0);
          } else if (id(pm_2_5).state <= 250.4) {
            // very unhealthy
            id(pm_2_5_aqi).publish_state((300.0 - 201.0) / (250.4 - 150.5) * (id(pm_2_5).state - 150.5) + 201.0);
          } else if (id(pm_2_5).state <= 350.4) {
            // hazardous
            id(pm_2_5_aqi).publish_state((400.0 - 301.0) / (350.4 - 250.5) * (id(pm_2_5).state - 250.5) + 301.0);
          } else if (id(pm_2_5).state <= 500.4) {
            // hazardous 2
            id(pm_2_5_aqi).publish_state((500.0 - 401.0) / (500.4 - 350.5) * (id(pm_2_5).state - 350.5) + 401.0);
          } else {
            id(pm_2_5_aqi).publish_state(500);
          }
    pm_1_0:
      name: "PM 1.0"
      id: pm_1_0
    pm_10_0:
      name: "PM 10.0"
      id: pm_10_0
    pm_0_3um:
      name: "PM 0.3"
      id: pm_0_3um
    update_interval: 2min
    uart_id: pms5003_uart

  - platform: template
    name: "PM 2.5 AQI"
    unit_of_measurement: "AQI"
    icon: "mdi:air-filter"
    accuracy_decimals: 0
    id: pm_2_5_aqi

  - platform: senseair
    # SenseAir S8 https://esphome.io/components/sensor/senseair.html
    # https://senseair.com/products/size-counts/s8-lp/
    co2:
      name: "SenseAir S8 CO2"
      id: co2
      filters:
        - skip_initial: 2
        - clamp:
            min_value: $SENSE_AIR_S8_CO2_MIN
    id: senseair_s8
    uart_id: senseair_s8_uart

  - platform: sht4x
    # SHT40 https://esphome.io/components/sensor/sht4x.html
    temperature:
      name: "Temperature"
      id: temp
    humidity:
      name: "Humidity"
      id: humidity
    address: 0x44

  # - platform: sht3xd
  #   # SHT30 https://esphome.io/components/sensor/sht3xd.html
  #   temperature:
  #     name: "Temperature"
  #     id: temp
  #   humidity:
  #     name: "Humidity"
  #     id: humidity
  #   address: 0x44
  #   heater_enabled: false  # Only enable if in conditions that may have high condensation

  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_dbm
    update_interval: 60s

  - platform: uptime
    name: "Uptime"
    id: device_uptime
    update_interval: 10s

  - platform: sgp4x
    # SGP41 https://esphome.io/components/sensor/sgp4x.html
    voc:
      name: "VOC Index"
      id: voc
    nox:
      name: "NOx Index"
      id: nox
    compensation:  # Remove this block if no temp/humidity sensor present for compensation
      temperature_source: temp
      humidity_source: humidity


binary_sensor:
  - platform: gpio
    pin:
      number: D7
      mode: INPUT_PULLUP
    name: "Display in °F"
    id: display_toggle_button
    on_release:
      then:
        - switch.toggle: display_in_f


font:
    # Font to use on the display
    # Open Source font Liberation Sans by Red Hat
    # https://www.dafont.com/liberation-sans.font
  # - file: "./fonts/liberation_sans/LiberationSans-Regular.ttf"
  - file:
      type: gfonts
      family: Poppins
      weight: light
    id: poppins_light
    size: 14
    glyphs: '!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/µ³'
  - file:
      type: gfonts
      family: Poppins
      weight: light
    id: poppins_light_12
    size: 12
    glyphs: '!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/µ³'
  - file: "gfonts://Ubuntu Mono"
    id: ubuntu
    size: 22
    glyphs: '!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/µ³'

display:
  # https://esphome.io/components/display/ssd1306.html
  # Formatting reference: https://www.tutorialspoint.com/c_standard_library/c_function_printf.htm
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    id: oled_display
    reset_pin: D0
    address: 0x3C
    # rotation: 180°
    pages:
      - id: summary1
        lambda: |-
          it.printf($line0, 0, id(poppins_light), "CO2:");
          it.printf($line1, 0, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f ppm", id(co2).state);
          it.printf($line0, 16, id(poppins_light), "PM2.5:");
          it.printf($line1, 16, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f µg/m³", id(pm_2_5).state);
          it.printf($line0, 32, id(poppins_light), "Temp:");
          if (id(display_in_f).state) {
            it.printf($line1, 32, id(poppins_light), TextAlign::TOP_RIGHT, "%.1f°F", (id(temp).state * 9.0f / 5.0f) + 32.05f);
          } else {
            it.printf($line1, 32, id(poppins_light), TextAlign::TOP_RIGHT, "%.1f°C", id(temp).state);
          }
          it.printf($line0, 48, id(poppins_light), "Humidity:");
          it.printf($line1, 48, id(poppins_light), TextAlign::TOP_RIGHT, "%.1f%%", id(humidity).state);
      - id: summary2
        lambda: |-
          it.printf($line0, 0, id(poppins_light), "CO2:");
          it.printf($line1, 0, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f ppm", id(co2).state);
          it.printf($line0, 16, id(poppins_light), "PM2.5:");
          it.printf($line1, 16, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f µg/m³", id(pm_2_5).state);
          it.printf($line0, 32, id(poppins_light), "VOC:");
          it.printf($line1, 32, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f", id(voc).state);
          it.printf($line0, 48, id(poppins_light), "NOx:");
          it.printf($line1, 48, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f", id(nox).state);
      - id: air_quality
        lambda: |-
          it.printf($line0, 4, id(ubuntu), "CO2");
          it.printf($line1, 4, id(ubuntu), TextAlign::TOP_RIGHT, "%.0f ppm", id(co2).state);
          it.printf($line0, 30, id(ubuntu), "PM2");
          it.printf($line1, 30, id(ubuntu), TextAlign::TOP_RIGHT, "%.0f µg/m³", id(pm_2_5).state);
      - id: air_temp
        lambda: |-
          it.printf($line0, 6, id(ubuntu), "Temp");
          if (id(display_in_f).state) {
            it.printf($line1, 6, id(ubuntu), TextAlign::TOP_RIGHT, "%.1f°F", (id(temp).state * 9.0f / 5.0f) + 32.05f);
          } else {
            it.printf($line1, 6, id(ubuntu), TextAlign::TOP_RIGHT, "%.1f°C", id(temp).state);
          }
          it.printf($line0, 34, id(ubuntu), "Humid");
          it.printf($line1, 34, id(ubuntu), TextAlign::TOP_RIGHT, "%.1f%%", id(humidity).state);
      - id: tvoc
        lambda: |-
          it.printf($line0, 6, id(ubuntu), "VOC:");
          it.printf($line1, 6, id(ubuntu), TextAlign::TOP_RIGHT, "%.0f", id(voc).state);
          it.printf($line0, 34, id(ubuntu), "NOx:");
          it.printf($line1, 34, id(ubuntu), TextAlign::TOP_RIGHT, "%.0f", id(nox).state);
      - id: combo
        lambda: |-
          if (id(display_in_f).state) {
            it.printf($line0, 0, id(poppins_light_12), "%.1f °F", (id(temp).state * 9.0f / 5.0f) + 32.05f);
          } else {
            it.printf($line0, 0, id(poppins_light_12), "%.1f °C", id(temp).state);
          }
          it.printf($line1, 0, id(poppins_light_12), TextAlign::TOP_RIGHT, "%.1f%%", id(humidity).state);
          it.printf($line0, 16, id(poppins_light_12), "%.0f µg", id(pm_2_5).state);
          it.printf($line1, 16, id(poppins_light_12), TextAlign::TOP_RIGHT, "%.0f ppm", id(co2).state);
          it.printf($line0, 32, id(poppins_light_12), "VOC: %.0f", id(voc).state);
          it.printf($line1, 32, id(poppins_light_12), TextAlign::TOP_RIGHT, "NOx: %.0f", id(nox).state);
          it.printf($line0, 48, id(poppins_light_12), "AQI: %.0f", id(pm_2_5_aqi).state);
          it.printf($line1, 48, id(poppins_light_12), "Wifi: %.0fdbm", id(wifi_dbm).state);
      - id: boot
        lambda: |-
          it.printf($line0, 0, id(poppins_light), "Serial: %s", get_mac_address().substr(6,11).c_str());
          it.printf($line0, 32, id(poppins_light), "Config Ver: $ag_esphome_config_version");
          it.printf($line1, 0, id(poppins_light), "WIFI SSID: $wifi_ssid");
    on_page_change:
      to: boot
      then:
        - if:
            # Skip the boot page after initial boot
            condition:
                lambda: 'return id(device_uptime).state > 30;'
            then:
              - display.page.show_next: oled_display
              - component.update: oled_display

button:
  # https://github.com/esphome/issues/issues/2444
  - platform: template
    name: SenseAir S8 Calibration
    id: senseair_s8_calibrate_button
    on_press:
      then:
        - senseair.background_calibration: senseair_s8
        - delay: 70s
        - senseair.background_calibration_result: senseair_s8
  - platform: template
    name: SenseAir S8 Enable Automatic Calibration
    id: senseair_s8_enable_calibrate_button
    on_press:
      then:
        - senseair.abc_enable: senseair_s8
  - platform: template
    name: SenseAir S8 Disable Automatic Calibration
    id: senseair_s8_disable_calibrate_button
    on_press:
      then:
        - senseair.abc_disable: senseair_s8


http_request:
  # Used to support POST request to send data to AirGradient
  # https://esphome.io/components/http_request.html


interval:
  - interval: 5s
    # Automatically switch to the next page every five seconds
    then:
      - if:
          # Show boot screen for first 10 seconds with serial number and config version
          condition:
              lambda: 'return id(device_uptime).state < 10;'
          then:
            - display.page.show: boot
            - lambda: id(device_uptime).set_update_interval(1);
          else:
            # Change page on display
            - display.page.show_next: oled_display
            - component.update: oled_display


  - interval: 2.5min
    # Send data to AirGradient API server
    then:
      - http_request.post:
          # https://api.airgradient.com/public/docs/api/v1/
          # AirGradient URL with the last 3 bytes of the MAC address in Hex format all lower case
          url: !lambda |-
            return "http://hw.airgradient.com/sensors/airgradient:" + get_mac_address().substr(6,11) + "/measures";
          headers:
              Content-Type: application/json
          # "!lambda return to_string(id(pm_2_5).state);" Converts sensor output from double to string
          json:
            wifi: !lambda return to_string(id(wifi_dbm).state);
            pm01: !lambda return to_string(id(pm_1_0).state);
            pm02: !lambda return to_string(id(pm_2_5).state);
            pm10: !lambda return to_string(id(pm_10_0).state);
            pm003_count: !lambda return to_string(id(pm_0_3um).state);
            rco2: !lambda return to_string(id(co2).state);
            atmp: !lambda return to_string(id(temp).state);
            rhum: !lambda return to_string(id(humidity).state);
            tvoc_index: !lambda return to_string(id(voc).state);
            nox_index: !lambda return to_string(id(nox).state);
