substitutions:
  pm_update_interval: "2min"

sensor:
  - platform: pmsx003
    # PMS5003T with temperature and humidity https://esphome.io/components/sensor/pmsx003.html
    # Update every 2 minutes to attempt to extend life, but could impact accuracy of readings in device
    type: PMS5003T
    uart_id: pms5003_uart
    pm_2_5:
      name: "PM 2.5"
      id: pm_2_5
      device_class: pm25  # Added to report properly to HomeKit
    pm_1_0:
      name: "PM 1.0"
      id: pm_1_0
      device_class: pm1  # Added to report properly to HomeKit
    pm_10_0:
      name: "PM 10.0"
      id: pm_10_0
      device_class: pm10  # Added to report properly to HomeKit
    pm_0_3um:
      name: "PM 0.3"
      id: pm_0_3um
    temperature:
      name: "Temperature"
      id: temp
      icon: "mdi:thermometer"
      filters:
          # https://forum.airgradient.com/t/outdoor-temperature-and-humidity-reading-correction/1544/19
        - lambda: !lambda |-
            if (x < 10.0) return (x * 1.327) - 6.738;
            return (x * 1.181) - 5.113;
    humidity:
      name: "Humidity"
      id: humidity
      icon: "mdi:water-percent"
      filters:
          # Compensation algorithm from AirGradient's research 2024-02-29
          # Ensuring max is 100% as calculation can exceed
        - lambda: |-
            float result = x * 1.259f + 7.34f;
            if (result > 100) return 100;
            return result;
    update_interval: $pm_update_interval


  - platform: template
    # Depends on another sensor providing an ID of pm_2_5 such as a pms5003
    name: "PM 2.5 AQI"
    id: pm_2_5_aqi
    update_interval: 5 min
    unit_of_measurement: "AQI"
    icon: "mdi:air-filter"
    accuracy_decimals: 0
    filters:
      - skip_initial: 1  # Need valid data from PM 2.5 sensor before able to calculate
    lambda: |-
      // https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI
      // Borrowed from https://github.com/kylemanna/sniffer/blob/master/esphome/sniffer_common.yaml
      if (id(pm_2_5).state <= 12.0) {
      // good
      return((50.0 - 0.0) / (12.0 - 0.0) * (id(pm_2_5).state - 0.0) + 0.0);
      } else if (id(pm_2_5).state <= 35.4) {
      // moderate
      return((100.0 - 51.0) / (35.4 - 12.1) * (id(pm_2_5).state - 12.1) + 51.0);
      } else if (id(pm_2_5).state <= 55.4) {
      // usg
      return((150.0 - 101.0) / (55.4 - 35.5) * (id(pm_2_5).state - 35.5) + 101.0);
      } else if (id(pm_2_5).state <= 150.4) {
      // unhealthy
      return((200.0 - 151.0) / (150.4 - 55.5) * (id(pm_2_5).state - 55.5) + 151.0);
      } else if (id(pm_2_5).state <= 250.4) {
      // very unhealthy
      return((300.0 - 201.0) / (250.4 - 150.5) * (id(pm_2_5).state - 150.5) + 201.0);
      } else if (id(pm_2_5).state <= 350.4) {
      // hazardous
      return((400.0 - 301.0) / (350.4 - 250.5) * (id(pm_2_5).state - 250.5) + 301.0);
      } else if (id(pm_2_5).state <= 500.4) {
      // hazardous 2
      return((500.0 - 401.0) / (500.4 - 350.5) * (id(pm_2_5).state - 350.5) + 401.0);
      } else {
      return(500);
      }
