# Used for a second PMS5003T in the same device, such as the Open Air O-1PPT
substitutions:
  pm_update_interval: "2min"

sensor:
  - platform: pmsx003
    # PMS5003T with temperature and humidity https://esphome.io/components/sensor/pmsx003.html
    type: PMS5003T
    uart_id: senseair_s8_uart
    pm_2_5:
      name: "PM 2.5 (2) Raw"
      id: pm_2_5_2_raw
      device_class: pm25  # Added to report properly to HomeKit
      disabled_by_default: true
    pm_1_0:
      name: "PM 1.0 (2)"
      id: pm_1_0_2
      device_class: pm1  # Added to report properly to HomeKit
    pm_10_0:
      name: "PM 10.0 (2)"
      id: pm_10_0_2
      device_class: pm10  # Added to report properly to HomeKit
    pm_0_3um:
      name: "PM 0.3 (2)"
      id: pm_0_3um_2
    temperature:
      name: "Temperature (2) Raw"
      id: temp_2_raw
      icon: "mdi:thermometer"
      disabled_by_default: true
    humidity:
      name: "Humidity (2) Raw"
      id: humidity_2_raw
      icon: "mdi:water-percent"
      disabled_by_default: true
    update_interval: $pm_update_interval


  - platform: copy
    source_id: temp_2_raw
    name: "Temperature (2)"
    id: temp_2
    # https://www.airgradient.com/documentation/correction-algorithms/
    filters:
      - lambda: |-
          if (x < 10.0) return (x * 1.327) - 6.738;
          return (x * 1.181) - 5.113;

  - platform: copy
    source_id: humidity_2_raw
    name: "Humidity (2)"
    id: humidity_2
    # https://www.airgradient.com/documentation/correction-algorithms/
    # Ensuring max is 100% as calculation can exceed
    filters:
      - lambda: |-
          float result = x * 1.259f + 7.34f;
          if (result > 100) return 100;
          return result;

  - platform: template
    # Impliments PM2.5 correction algorithm supported by AirGradient from EPA
    # https://www.airgradient.com/documentation/correction-algorithms/
    # https://document.airnow.gov/airnow-fire-and-smoke-map-questions-and-answers.pdf
    name: "PM 2.5 (2)"
    id: pm_2_5_2
    update_interval: 30s
    device_class: pm25  # Added to report properly to HomeKit
    unit_of_measurement: µg/m³
    icon: mdi:chemical-weapon
    accuracy_decimals: 0
    state_class: measurement
    lambda: |-
      float result = 0.0;
      if (id(pm_2_5_2_raw).state == 0.0) {
        result = 0.0;
      } else if (id(pm_2_5_2_raw).state < 30.0) {
        result = (0.524 * id(pm_2_5_2_raw).state) - (0.0862 * id(humidity).state) + 5.75;
      } else if (id(pm_2_5_2_raw).state < 50.0) {
        result = (0.786 * (id(pm_2_5_2_raw).state / 20 - 3/2) + 0.524 * (1 - (id(pm_2_5_2_raw).state / 20 - 3/2))) * id(pm_2_5_2_raw).state - (0.0862 * id(humidity).state) + 5.75;
      } else if (id(pm_2_5_2_raw).state < 210.0) {
        result = (0.786 * id(pm_2_5_2_raw).state) - (0.0862 * id(humidity).state) + 5.75;
      } else if (id(pm_2_5_2_raw).state < 260.0) {
        result = (0.69 * (id(pm_2_5_2_raw).state / 50 - 21/5) + 0.786 * (1 - (id(pm_2_5_2_raw).state / 50 - 21/5))) * id(pm_2_5_2_raw).state - (0.0862 * id(humidity).state * (1 - (id(pm_2_5_2_raw).state / 50 - 21/5))) + (2.966 * (id(pm_2_5_2_raw).state / 50 - 21/5)) + (5.75 * (1 - (id(pm_2_5_2_raw).state / 50 - 21/5))) + (8.84 * pow(10,-4) * pow(id(pm_2_5_2_raw).state,2) * (id(pm_2_5_2_raw).state / 50 - 21/5));
      } else {
        result = 2.966 + (0.69 * id(pm_2_5_2_raw).state) + (8.84 * pow(10,-4) * pow(id(pm_2_5_2_raw).state,2));
      }
      if (result <= 0.0) {
        return 0.0;
      } else {
        return result;
      }

# Average the readings from both sensors to return a value
  - platform: template
    id: pm_2_5_avg
    name: "PM 2.5 (Average)"
    lambda: return (id(pm_2_5).state + id(pm_2_5_2).state) / 2.0;
    device_class: pm25
    unit_of_measurement: µg/m³
    icon: mdi:chemical-weapon
    accuracy_decimals: 0
    state_class: measurement
    update_interval: $pm_update_interval

  - platform: template
    id: pm_1_0_avg
    name: "PM 1.0 (Average)"
    lambda: return (id(pm_1_0).state + id(pm_1_0_2).state) / 2.0;
    device_class: pm1
    unit_of_measurement: µg/m³
    icon: mdi:chemical-weapon
    accuracy_decimals: 0
    state_class: measurement
    update_interval: $pm_update_interval

  - platform: template
    id: pm_10_0_avg
    name: "PM 10.0 (Average)"
    lambda: return (id(pm_10_0).state + id(pm_10_0_2).state) / 2.0;
    device_class: pm10
    unit_of_measurement: µg/m³
    icon: mdi:chemical-weapon
    accuracy_decimals: 0
    state_class: measurement
    update_interval: $pm_update_interval

  - platform: template
    id: pm_0_3um_avg
    name: "PM 0.3 (Average)"
    lambda: return (id(pm_0_3um).state + id(pm_0_3um_2).state) / 2.0;
    unit_of_measurement: /dL
    icon: mdi:chemical-weapon
    accuracy_decimals: 0
    state_class: measurement
    update_interval: $pm_update_interval

  - platform: template
    id: temp_avg
    name: "Temperature (Average)"
    lambda: return (id(temp).state + id(temp_2).state) / 2.0;
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    state_class: measurement
    icon: mdi:thermometer
    update_interval: $pm_update_interval

  - platform: template
    id: humidity_avg
    name: "Humidity (Average)"
    lambda: return (id(humidity).state + id(humidity_2).state) / 2.0;
    unit_of_measurement: '%'
    accuracy_decimals: 1
    device_class: humidity
    state_class: measurement
    icon: mdi:water-percent
    update_interval: $pm_update_interval
